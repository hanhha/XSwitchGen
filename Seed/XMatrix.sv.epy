// HMTH (c)
// Matrix of XPoints

module <%=prefix%>XMatrix #(parameter VDW = <%=vdw%>) (
    input  logic [<%=n_targets-1%>:0] I0_req
<%for i in range(1,n_initiators):%>
  , input  logic [<%=n_targets-1%>:0] I<%=i%>_req
<%%>

<%for i in range(0,n_initiators):%>
  , input  logic [VDW-1 : 0] I<%=i%> 
<%%>

<%for i in range(0,n_targets):%>
  , output logic [VDW-1 : 0] T<%=i%> 
<%%>
);

<%for i in range(0,n_initiators):%>
<%  for j in range(0,n_targets):%>
logic  X<%=i%><%=j%>_BEN;
logic [VDW-1:0] X<%=i%><%=j%>_I0, X<%=i%><%=j%>_I1, X<%=i%><%=j%>_O0, X<%=i%><%=j%>_O1;
<%  %>
<%%>

// Connections
<%for i in range(0,n_initiators):%>
<%  for j in range(0,n_targets):%>
<%    if i == 0:%>
assign X<%=i%><%=j%>_I0 = {VDW{1'b0}};
<%    else:%>
assign X<%=i%><%=j%>_I0 = X<%=i-1%><%=j%>_O1;
<%    %>
<%    if j < n_targets-1:%>
assign X<%=i%><%=j%>_I1 = X<%=i%><%=j+1%>_O0;
<%    else:%>
assign X<%=i%><%=j%>_I1 = I<%=i%>;
<%    %>
<%  %>
<%%>

<%for j in range(0,n_targets):%>
assign T<%=j%> = X<%=n_initiators-1%><%=j%>_O1;
<%%>

<%for i in range(0,n_initiators):%>
<%  for j in range(0,n_targets):%>
<%    if conn_matrix[i][j] == 0:%>
assign X<%=i%><%=j%>_BEN = 1'b0; // Unconnected
<%    else:%>
assign X<%=i%><%=j%>_BEN = I<%=i%>_req [<%=j%>];
<%    %>
<%  %>
<%%>

// Matrix instance
// ==========================
//     I_0
// I_1  +  O_0
//     O_1
// assign O0 = BEN ? I0 : I1;
// assign O1 = BEN ? I1 : I0;
// ==========================
<%for i in range(0,n_initiators):%>
<%  for j in range(0,n_targets):%>
assign X<%=i%><%=j%>_O0 =  X<%=i%><%=j%>_BEN ? X<%=i%><%=j%>_I0 : X<%=i%><%=j%>_I1;
assign X<%=i%><%=j%>_O1 =  X<%=i%><%=j%>_BEN ? X<%=i%><%=j%>_I1 : X<%=i%><%=j%>_I0;
<%  %>
<%%>

`ifndef SYNTHESIS
// Validating inputs
// All I*_req are onehot0
  `ifndef RICHMAN
<%for i in range(0, n_initiators):%>
    integer I<%=i%>_ones;
<%%>
    integer i;

    always @(*) begin
<%for i in range(0, n_initiators):%>
      I<%=i%>_ones = 0;
<%%>
      for (i = 0; i < <%=n_targets%>; i++) begin 
<%for i in range(0, n_initiators):%>
        I<%=i%>_ones = I<%=i%>_ones + I<%=i%>_req [i];
<%%>
      end
<%for i in range(0, n_initiators):%>
      assume (I<%=i%>_ones <= 1);
<%%>
    end
  `else
    always @(*) begin
<%for i in range(0, n_initiators):%>
      assume ($onehot0 (I<%=i%>_req));
<%%>
    end
  `endif

// Guarantee no dupplicated request
  always @(*) begin
<%for i in range(0,n_initiators):%>
<%  for j in range(i+1,n_initiators):%>
    assume ((I<%=i%>_req ^ I<%=j%>_req) == (I<%=i%>_req | I<%=j%>_req));
<%  %>
<%%>
  end

// Verifying output
  always @(*) begin
<%for i in range(0,n_initiators):%>
    case (I<%=i%>_req)
<%  for j in range(0,n_targets):%>
<%    if conn_matrix[i][j] == 1:%>
      <%=n_targets%>'d<%=1 << j%>: assert (T<%=j%> == I<%=i%>);
<%    %>
<%  %>
    endcase
<%%>
  end

`endif

endmodule
//EOF
