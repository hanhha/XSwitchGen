// HMTH (c)

module <%=prefix%>XRouter #(parameter VDW = <%=vdw%>, DW = <%=pktwidth%>) (
    input logic clk
  , input logic rstn

<%for i in range(0,n_initiators):%>
  , input  logic           I<%=i%>_vld
  , input  logic [VDW-1:0] I<%=i%>_pkt // {init_tag, tgt_tag, pkt (tgt addr + data)}
  , output logic           I<%=i%>_gnt
<%%>

<%for j in range(0,n_targets):%>
  , input  logic           T<%=j%>_rdy
  , output logic           T<%=j%>_vld
  , output logic [VDW-1:0] T<%=j%>_pkt // {init_tag, tgt_tag, pkt (tgt addr + data}
<%%>
);

<%for i in range(0,n_initiators):%>
logic [<%=n_targets-1%>:0] I<%=i%>_req, I<%=i%>_vreq;
<%%>

<%for i in range(0,n_initiators):%>
always @(*) begin
  case (I<%=i%>_pkt [<%=vdw-initid_width-1%>:<%=pktwidth%>])
<%  for j in range(0,n_targets):%>
<%    pre = n_targets - (j + 1) %>
    <%=targetid_width%>'d<%=j%>    : I<%=i%>_req = {<%=pre%>'b0, I<%=i%>_vld, <%=j%>'b0};
<%  %>
    default : I<%=i%>_req = <%=n_targets%>'b0;
  endcase
end
<%%>

<%for i in range(0,n_initiators):%>
assign I<%=i%>_gnt = I<%=i%>_vreq;
<%%>

logic [<%=n_targets-1%>:0] T_rdy;
assign T_rdy = {<%=", ".join(["T" + str(i) + "_rdy" for i in reversed(range(0, n_targets))])%>};

<%for i in range (0,n_initiators):%>
logic [VDW:0] I<%=i%>_pkt_ex;
assign I<%=i%>_pkt_ex = {I<%=i%>_pkt, I<%=i%>_vld};

<%%>

<%for j in range (0,n_targets):%>
logic [VDW:0] T<%=j%>_pkt_ex;
assign {T<%=j%>_pkt, T<%=j%>_vld} = T<%=j%>_pkt_ex;

<%%>

<%=prefix%>XArbiter XArbiter (.clk (clk), .rstn (rstn)
                   , .T_rdy   (T_rdy)
<%for i in range (0,n_initiators):%>
                   , .I<%=i%>_req  (I<%=i%>_req)
                   , .I<%=i%>_vreq (I<%=i%>_vreq)
<%%>
                  );

<%=prefix%>XMatrix #(VDW+1) XMatrix (
<%for j in range (0,n_targets):%>
<%	if j == 0:%>
                          .T<%=j%> (T<%=j%>_pkt_ex)
<%	else:%>
                        , .T<%=j%> (T<%=j%>_pkt_ex)
<%	%>
<%%>
<%for i in range (0,n_initiators):%>
                        , .I<%=i%>_req (I<%=i%>_vreq)
                        , .I<%=i%>     (I<%=i%>_pkt_ex)
<%%>
                       );

`ifndef SYNTHESIS
// Validating output
always @(*) begin
<%for j in range (0,n_targets):%>
  if (T<%=j%>_vld) assert (T<%=j%>_pkt [<%=vdw-initid_width-1%>:<%=pktwidth%>] == <%=j%>);
<%%>
end
`endif

endmodule
// EOF
