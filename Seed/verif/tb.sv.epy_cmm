// HMTH (c)	
//TODO: add IO and wires for desired initiators and targets 
// to connect them to testbench and control in test.cpp

module <%=cmm_prefix%>XFabricCover (
	input logic clk,
	input logic rstn
);

<%=cmm_prefix%>XFabric Fabric ( .clk(clk), .rstn(rstn)
<%for i in range(n_initiators):%>
  , .<%=agents["I" + str(i)]%>_req_vld (1'b0)
  , .<%=agents["I" + str(i)]%>_req_wr  (1'b0)
  , .<%=agents["I" + str(i)]%>_req_adr  (<%=agents_addrwidth["I" + str(i)]%>'d0)
  , .<%=agents["I" + str(i)]%>_req_strb (<%=(agents_datawidth["I" + str(i)]//8)%>'d0)
  , .<%=agents["I" + str(i)]%>_req_dat  (<%=agents_datawidth["I" + str(i)]%>'d0)
  , .<%=agents["I" + str(i)]%>_req_gnt ()
  , .<%=agents["I" + str(i)]%>_rsp_vld ()
  , .<%=agents["I" + str(i)]%>_rsp_dat ()
  , .<%=agents["I" + str(i)]%>_rsp_gnt (1'b0)
<%%>

<%for j in range(n_targets):%>
  , .<%=agents["T" + str(j)]%>_req_vld ()
  , .<%=agents["T" + str(j)]%>_req_wr ()
  , .<%=agents["T" + str(j)]%>_req_adr ()
  , .<%=agents["T" + str(j)]%>_req_strb ()
  , .<%=agents["T" + str(j)]%>_req_dat ()
  , .<%=agents["T" + str(j)]%>_req_gnt (1'b0)
  , .<%=agents["T" + str(j)]%>_rsp_vld (1'b0)
  , .<%=agents["T" + str(j)]%>_rsp_dat (<%=agents_datawidth["T" + str(j)]%>'d0)
  , .<%=agents["T" + str(j)]%>_rsp_gnt ()
<%%>
);

endmodule

module <%=cmm_prefix%>DummyTarget #(parameter AW = 24, DW = 16, DMMY_AW = 2) (
  input  logic clk,
  input  logic rstn,

  input  logic              req_vld,
  output logic              req_gnt,
  input  logic              req_wr,
  input  logic [(DW/8)-1:0] req_strb,
  input  logic [AW-1:0]     req_adr,
  input  logic [DW-1:0]     req_dat,

  output logic              rsp_vld,
  input  logic              rsp_gnt,
  output logic [DW-1:0]     rsp_dat
);
localparam LW_IDX = $clog2(DW/8);
localparam UW_IDX = (DMMY_AW - 1) < LW_IDX ? LW_IDX : DMMY_AW - 1;

logic [DW-1:0] mem [0 : (1 << (UW_IDX - LW_IDX + 1))-1];
logic state;

logic [UW_IDX:LW_IDX] cur_adr;

assign rsp_dat = mem [cur_adr];

`ifndef SELECT_SRSTn
always @(posedge clk, negedge rstn) begin
`else
always @(posedge clk) begin
`endif
  if (~rstn) begin
    state   <= 1'b0;

    req_gnt <= 1'b1;
    rsp_vld <= 1'b0;

    cur_adr <= {(UW_IDX-LW_IDX+1){1'b0}};
  end else begin
    case (state)
      1'b0 : begin
              state   <= req_vld & req_gnt ? 1'b1 : state;

              req_gnt <= req_vld ? 1'b0 : req_gnt;
              rsp_vld <= req_vld ? 1'b1 : rsp_vld;

              cur_adr <= req_vld ? req_adr [UW_IDX:LW_IDX] : cur_adr;
             end
      1'b1 : begin
              state   <= rsp_gnt ? 1'b0 : state;

              req_gnt <= rsp_gnt ? 1'b1 : req_gnt;
              rsp_vld <= rsp_gnt ? 1'b0 : rsp_vld;
             end
    endcase
  end
end

integer i;
always @(posedge clk)
  if (req_vld & req_gnt & req_wr)
    for (i = 0; i < DW/8; i++) begin
      if (req_strb [i])
        mem [req_adr[UW_IDX:LW_IDX]][(i*8)+:8] <= req_dat [(i*8)+:8];
    end

endmodule
//EOF
