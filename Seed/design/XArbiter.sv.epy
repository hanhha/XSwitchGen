// HMTH (c)
// Arbitrate requests from masters
// There is no dupplicated request to same target at output

module <%=prefix%>XArbiter (
    input logic clk
  , input logic rstn

<%for i in range(0,n_initiators):%>
  , input  logic [<%=n_targets-1%>:0] I<%=i%>_req
  , output logic [<%=n_targets-1%>:0] I<%=i%>_vreq
<%%>
  , input logic [<%=n_targets-1%>:0] T_rdy
);

<%for i in range(0,n_initiators):%>
logic [<%=n_targets-1%>:0] I<%=i%>_req_avail;
assign I<%=i%>_req_avail = I<%=i%>_req & T_rdy;

<%%>

<%for j in range(0,n_targets):%>
logic [<%=n_initiators-1%>:0] T<%=j%>_gnt, req_T<%=j%>;
assign req_T<%=j%> = {<%=", ".join(["I" + str(i) + "_req_avail [" + str(j) + "]" for i in reversed(range(0,n_initiators))])%>};
<%=cmm_prefix%>XArbiter_RR #(<%=n_initiators%>) T<%=j%>_RR (.clk (clk), .rstn (rstn), .req (req_T<%=j%>), .gnt (T<%=j%>_gnt));

<%%>

<%for i in range(0, n_initiators):%>
assign I<%=i%>_vreq = {<%=", ".join(["T" + str(j) + "_gnt [" + str(i) + "]" for j in reversed(range(0,n_targets))])%>};
<%%>

`ifndef SYNTHESIS
// Validating inputs
// All I*_req are onehot0
  `ifndef RICHMAN
<%for i in range(0, n_initiators):%>
    integer I<%=i%>_ones;
<%%>
    integer i;

/* verilator lint_off WIDTH */
    always @(*) begin
<%for i in range(0, n_initiators):%>
      I<%=i%>_ones = 0;
<%%>
      for (i = 0; i < <%=n_targets%>; i++) begin 
<%for i in range(0, n_initiators):%>
        I<%=i%>_ones = I<%=i%>_ones + I<%=i%>_req [i];
<%%>
      end
<%for i in range(0, n_initiators):%>
      assume (I<%=i%>_ones <= 1);
<%%>
    end
/* verilator lint_on WIDTH */
  `else
    always @(*) begin
<%for i in range(0, n_initiators):%>
      assume ($onehot0(I<%=i%>_req));
<%%>
    end
  `endif

// Verifying output
  always @(*) begin
<%for i in range(0,n_initiators):%>
<%  for j in range(i+1,n_initiators):%>
    assert ((I<%=i%>_vreq ^ I<%=j%>_vreq) == (I<%=i%>_vreq | I<%=j%>_vreq));
<%  %>
<%%>
  end

`endif

endmodule
// EOF
